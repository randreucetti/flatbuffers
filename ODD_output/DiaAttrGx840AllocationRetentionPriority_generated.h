// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_DIAATTRGX840ALLOCATIONRETENTIONPRIORITY_ODD_GX840_H_
#define FLATBUFFERS_GENERATED_DIAATTRGX840ALLOCATIONRETENTIONPRIORITY_ODD_GX840_H_

#include "flatbuffers/flatbuffers.h"

namespace odd {
namespace Gx840 {

struct DiaAttrGx840AllocationRetentionPriority;

struct DiaAttrGx840AllocationRetentionPriority : private flatbuffers::Table {
  int32_t gx840PriorityLevel() const { return GetField<int32_t>(4, 0); }
  const flatbuffers::String *gx840PreemptionCapability() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::String *gx840PreemptionVunerablilty() const { return GetPointer<const flatbuffers::String *>(8); }
  bool Verify(const flatbuffers::Verifier &verifier) const {
    return VerifyTable(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* gx840PriorityLevel */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* gx840PreemptionCapability */) &&
           verifier.Verify(gx840PreemptionCapability()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* gx840PreemptionVunerablilty */) &&
           verifier.Verify(gx840PreemptionVunerablilty());
  }
};

struct DiaAttrGx840AllocationRetentionPriorityBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_gx840PriorityLevel(int32_t gx840PriorityLevel) { fbb_.AddElement<int32_t>(4, gx840PriorityLevel, 0); }
  void add_gx840PreemptionCapability(flatbuffers::Offset<flatbuffers::String> gx840PreemptionCapability) { fbb_.AddOffset(6, gx840PreemptionCapability); }
  void add_gx840PreemptionVunerablilty(flatbuffers::Offset<flatbuffers::String> gx840PreemptionVunerablilty) { fbb_.AddOffset(8, gx840PreemptionVunerablilty); }
  DiaAttrGx840AllocationRetentionPriorityBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  DiaAttrGx840AllocationRetentionPriorityBuilder &operator=(const DiaAttrGx840AllocationRetentionPriorityBuilder &);
  flatbuffers::Offset<DiaAttrGx840AllocationRetentionPriority> Finish() { return flatbuffers::Offset<DiaAttrGx840AllocationRetentionPriority>(fbb_.EndTable(start_, 3)); }
};

inline flatbuffers::Offset<DiaAttrGx840AllocationRetentionPriority> CreateDiaAttrGx840AllocationRetentionPriority(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t gx840PriorityLevel = 0,
   flatbuffers::Offset<flatbuffers::String> gx840PreemptionCapability = 0,
   flatbuffers::Offset<flatbuffers::String> gx840PreemptionVunerablilty = 0) {
  DiaAttrGx840AllocationRetentionPriorityBuilder builder_(_fbb);
  builder_.add_gx840PreemptionVunerablilty(gx840PreemptionVunerablilty);
  builder_.add_gx840PreemptionCapability(gx840PreemptionCapability);
  builder_.add_gx840PriorityLevel(gx840PriorityLevel);
  return builder_.Finish();
}

};  // namespace odd
};  // namespace Gx840

#endif  // FLATBUFFERS_GENERATED_DIAATTRGX840ALLOCATIONRETENTIONPRIORITY_ODD_GX840_H_
