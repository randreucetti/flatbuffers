// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_DIAATTRGX840QOSINFO_ODD_GX840_H_
#define FLATBUFFERS_GENERATED_DIAATTRGX840QOSINFO_ODD_GX840_H_

#include "flatbuffers/flatbuffers.h"

namespace odd {
namespace Gx840 {

struct DiaAttrGx840CoaInfo;

struct DiaAttrGx840CoaInfo : private flatbuffers::Table {
  const flatbuffers::String *gx840QosClassIdentifier() const { return GetPointer<const flatbuffers::String *>(4); }
  int32_t gx840MaxRequestedBandwidthUl() const { return GetField<int32_t>(6, 0); }
  int32_t gx840MaxRequestedBandwidthDl() const { return GetField<int32_t>(8, 0); }
  int32_t gx840GuaranteedBitrateUl() const { return GetField<int32_t>(10, 0); }
  int32_t gx840GuaranteedBitrateDl() const { return GetField<int32_t>(12, 0); }
  const flatbuffers::String *gx840BearerIdentifier() const { return GetPointer<const flatbuffers::String *>(14); }
  const DiaAttrGx840AllocationRetentionPriority *gx840AllocationRetentionPriority() const { return GetPointer<const DiaAttrGx840AllocationRetentionPriority *>(16); }
  int32_t gx840ApnAggregateMaxBitrateUl() const { return GetField<int32_t>(18, 0); }
  int32_t gx840ApnAggregateMaxBitrateDl() const { return GetField<int32_t>(20, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<Binary>> *avp() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Binary>> *>(22); }
  bool Verify(const flatbuffers::Verifier &verifier) const {
    return VerifyTable(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* gx840QosClassIdentifier */) &&
           verifier.Verify(gx840QosClassIdentifier()) &&
           VerifyField<int32_t>(verifier, 6 /* gx840MaxRequestedBandwidthUl */) &&
           VerifyField<int32_t>(verifier, 8 /* gx840MaxRequestedBandwidthDl */) &&
           VerifyField<int32_t>(verifier, 10 /* gx840GuaranteedBitrateUl */) &&
           VerifyField<int32_t>(verifier, 12 /* gx840GuaranteedBitrateDl */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* gx840BearerIdentifier */) &&
           verifier.Verify(gx840BearerIdentifier()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* gx840AllocationRetentionPriority */) &&
           verifier.VerifyTable(gx840AllocationRetentionPriority()) &&
           VerifyField<int32_t>(verifier, 18 /* gx840ApnAggregateMaxBitrateUl */) &&
           VerifyField<int32_t>(verifier, 20 /* gx840ApnAggregateMaxBitrateDl */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 22 /* avp */) &&
           verifier.Verify(avp()) &&
           verifier.VerifyVectorOfTables(avp());
  }
};

struct DiaAttrGx840CoaInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_gx840QosClassIdentifier(flatbuffers::Offset<flatbuffers::String> gx840QosClassIdentifier) { fbb_.AddOffset(4, gx840QosClassIdentifier); }
  void add_gx840MaxRequestedBandwidthUl(int32_t gx840MaxRequestedBandwidthUl) { fbb_.AddElement<int32_t>(6, gx840MaxRequestedBandwidthUl, 0); }
  void add_gx840MaxRequestedBandwidthDl(int32_t gx840MaxRequestedBandwidthDl) { fbb_.AddElement<int32_t>(8, gx840MaxRequestedBandwidthDl, 0); }
  void add_gx840GuaranteedBitrateUl(int32_t gx840GuaranteedBitrateUl) { fbb_.AddElement<int32_t>(10, gx840GuaranteedBitrateUl, 0); }
  void add_gx840GuaranteedBitrateDl(int32_t gx840GuaranteedBitrateDl) { fbb_.AddElement<int32_t>(12, gx840GuaranteedBitrateDl, 0); }
  void add_gx840BearerIdentifier(flatbuffers::Offset<flatbuffers::String> gx840BearerIdentifier) { fbb_.AddOffset(14, gx840BearerIdentifier); }
  void add_gx840AllocationRetentionPriority(flatbuffers::Offset<DiaAttrGx840AllocationRetentionPriority> gx840AllocationRetentionPriority) { fbb_.AddOffset(16, gx840AllocationRetentionPriority); }
  void add_gx840ApnAggregateMaxBitrateUl(int32_t gx840ApnAggregateMaxBitrateUl) { fbb_.AddElement<int32_t>(18, gx840ApnAggregateMaxBitrateUl, 0); }
  void add_gx840ApnAggregateMaxBitrateDl(int32_t gx840ApnAggregateMaxBitrateDl) { fbb_.AddElement<int32_t>(20, gx840ApnAggregateMaxBitrateDl, 0); }
  void add_avp(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Binary>>> avp) { fbb_.AddOffset(22, avp); }
  DiaAttrGx840CoaInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  DiaAttrGx840CoaInfoBuilder &operator=(const DiaAttrGx840CoaInfoBuilder &);
  flatbuffers::Offset<DiaAttrGx840CoaInfo> Finish() { return flatbuffers::Offset<DiaAttrGx840CoaInfo>(fbb_.EndTable(start_, 10)); }
};

inline flatbuffers::Offset<DiaAttrGx840CoaInfo> CreateDiaAttrGx840CoaInfo(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> gx840QosClassIdentifier = 0,
   int32_t gx840MaxRequestedBandwidthUl = 0,
   int32_t gx840MaxRequestedBandwidthDl = 0,
   int32_t gx840GuaranteedBitrateUl = 0,
   int32_t gx840GuaranteedBitrateDl = 0,
   flatbuffers::Offset<flatbuffers::String> gx840BearerIdentifier = 0,
   flatbuffers::Offset<DiaAttrGx840AllocationRetentionPriority> gx840AllocationRetentionPriority = 0,
   int32_t gx840ApnAggregateMaxBitrateUl = 0,
   int32_t gx840ApnAggregateMaxBitrateDl = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Binary>>> avp = 0) {
  DiaAttrGx840CoaInfoBuilder builder_(_fbb);
  builder_.add_avp(avp);
  builder_.add_gx840ApnAggregateMaxBitrateDl(gx840ApnAggregateMaxBitrateDl);
  builder_.add_gx840ApnAggregateMaxBitrateUl(gx840ApnAggregateMaxBitrateUl);
  builder_.add_gx840AllocationRetentionPriority(gx840AllocationRetentionPriority);
  builder_.add_gx840BearerIdentifier(gx840BearerIdentifier);
  builder_.add_gx840GuaranteedBitrateDl(gx840GuaranteedBitrateDl);
  builder_.add_gx840GuaranteedBitrateUl(gx840GuaranteedBitrateUl);
  builder_.add_gx840MaxRequestedBandwidthDl(gx840MaxRequestedBandwidthDl);
  builder_.add_gx840MaxRequestedBandwidthUl(gx840MaxRequestedBandwidthUl);
  builder_.add_gx840QosClassIdentifier(gx840QosClassIdentifier);
  return builder_.Finish();
}

inline const DiaAttrGx840CoaInfo *GetDiaAttrGx840CoaInfo(const void *buf) { return flatbuffers::GetRoot<DiaAttrGx840CoaInfo>(buf); }

inline bool VerifyDiaAttrGx840CoaInfoBuffer(const flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<DiaAttrGx840CoaInfo>(); }

};  // namespace odd
};  // namespace Gx840

#endif  // FLATBUFFERS_GENERATED_DIAATTRGX840QOSINFO_ODD_GX840_H_
